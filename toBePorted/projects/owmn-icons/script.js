//OWMN CSS Generator Script
//By Yernemm

//----------------------------------------------------
//Properties
//Location of csv table.
const csvDataLocation = "https://docs.google.com/spreadsheets/d/1ZCZ50WS1zXhf6RXk25N_h4aTrjEPLAHQXM1dVjNPfOQ/gviz/tq?tqx=out:csv&sheet=main";
//Number of rows in the sprite sheet.
const rows = 5;
//Height and width of each square sprite.
const spriteSize = 32;

function generate() {

    //Load csv data
    function getText() {
        var request = new XMLHttpRequest();
        request.open('GET', csvDataLocation, true);
        request.send(null);
        request.onreadystatechange = function () {
            if (request.readyState === 4 && request.status === 200) {
                var type = request.getResponseHeader('Content-Type');
                if (type.indexOf("text") !== 1) {

                    convertcsv(request.responseText);
                }
            }
        }
    }
    getText();


    //Convert csv to objects
    function convertcsv(bufferString) {
        bufferString = bufferString.replace(/"/g, '');
        var arr = bufferString.split('\n');
        var jsonObj = [];
        var headers = arr[0].split(',');
        for (var i = 1; i < arr.length; i++) {
            var data = arr[i].split(',');
            var obj = {};
            for (var j = 0; j < data.length; j++) {
                obj[headers[j].trim()] = data[j].trim();
            }
            jsonObj.push(obj);
        }

        gen(jsonObj);
    }

    //Generate the content
    function gen(data) {
        side(data);
        cssGen(data);
        spritesGen(data);
    }

    //Generate sidebar text
    function side(data) {
        console.log(data);
        var tank = [];
        var damage = [];
        var support = [];

        var heroes = Object.values(data);

        heroes.forEach(hero => {
            var hString = "[" + hero.name + "](/r/" + hero.sub + ")";
            switch (hero.class) {
                case "t":
                    tank.push(hString);
                    break;
                case "d":
                    damage.push(hString);
                    break;
                case "s":
                    support.push(hString);
                    break;
            }
        });
        tank.sort();
        damage.sort();
        support.sort();
        console.log(tank);
        console.log(damage);
        console.log(support);

        var sideText = "# Mains Network\n\n## Tank\n\n";
        tank.forEach(a => {
            sideText += a + "\n"
        });
        sideText += "\n## Damage\n\n";
        damage.forEach(a => {
            sideText += a + "\n"
        });
        sideText += "\n## Support\n\n";
        support.forEach(a => {
            sideText += a + "\n"
        });

        sideText+="\nSidebar links generated by /u/Yernemm\n";


        document.getElementById("textSidebar").innerHTML = sideText;
    }

    //Generate CSS
    function cssGen(data) {
        var heroes = Object.values(data);
        var cssText = "/* Mains Network Sidebar Links */\n/* Generated using https://yernemm.xyz/projects/owmn-icons/ by /u/Yernemm */\n\n"
        var heroNum = heroes.length;
        var i = 1;
        heroes.forEach(hero => {
            cssText += '.side a[href="/r/';
            cssText += hero.sub;
            cssText += '"]';
            if (i != heroNum) {
                cssText += ","
            };
            cssText += "\n";

            i++;
        });
        cssText += "{\n            background:url(%%herosprites%%) center center no-repeat;\n            display:inline-block;\n            padding:0;\n            margin:0;\n            border-bottom: 0px;\n            font-size:0;\n            overflow:hidden;\n            width: " + spriteSize + "px;\n            height: " + spriteSize + "px;\n}\n";


        i = 1;
        heroes.forEach(hero => {
            cssText += '.side a[href="/r/';
            cssText += hero.sub;
            cssText += '"]: hover';
            if (i != heroNum) {
                cssText += ","
            };
            cssText += "\n";

            i++;
        });
        cssText += "{\n            background:url(%%herospriteshover%%) center center no-repeat;\n            display:inline-block;\n            padding:0;\n            margin:0;\n            border-bottom: 0px;\n            font-size:0;\n            overflow:hidden;\n            width: " + spriteSize + "px;\n            height: " + spriteSize + "px;\n}\n";




        i = 1;
        heroes.forEach(hero => {
            cssText += '\n\n.side a[href="/r/';
            cssText += hero.sub;
            cssText += '"],\n.side a[href="/r/';
            cssText += hero.sub;
            cssText += '"]: hover {\n    background-position: -';
            var pos = getSpritePosition(hero);

            cssText += pos.x + "px -" + pos.y + "px;\n}";


            i++;
        });

        cssText+="\n.side .md h2+p{\n text-align:center\n}\n\n/*-------------*/";

        document.getElementById("textCSS").innerHTML = cssText;
    }

    //Generate sprite sheets.
    function spritesGen(data) {
        //Validate colours
        var colMainHex = document.getElementById("colourMain").value;
        var colHoverHex = document.getElementById("colourHover").value;
        if (!validateHex(colMainHex)) {
            colMainHex = "#dddddd";
            alert("Invalid hex code for main colour. Using light grey.")
        };
        if (!validateHex(colHoverHex)) {
            colHoverHex = "#444444";
            alert("Invalid hex code for hover colour. Using dark grey.")
        };
        var colMain = hexToRgb(colMainHex);
        var colHover = hexToRgb(colHoverHex);

        //Generate canvases
        var dims = getSpritesSize(data);

        var canvasMain = document.createElement('canvas');
        canvasMain.id = "cMain";
        canvasMain.width = dims.x;
        canvasMain.height = dims.y;
        var ctxm = canvasMain.getContext("2d");

        var canvasHover = document.createElement('canvas');
        canvasHover.id = "cHover";
        canvasHover.width = dims.x;
        canvasHover.height = dims.y;
        var ctxh = canvasHover.getContext("2d");

        //Recursive function to draw images onto main canvas.

        var heroes = Object.values(data);
        var i = 0;
        drawToMain(i)

        function drawToMain(id) {
            var img = new Image();
            img.src = heroes[i].image;

            var pos = getSpritePosition(heroes[i])
            img.onload = function () {
                console.log(img.src);

                ctxm.drawImage(img, pos.x, pos.y, spriteSize, spriteSize);
                i++;
                prog("Loading images: " + i + "/" + heroes.length);
                if (i < heroes.length) {

                    drawToMain(i);
                } else
                    done1();
            };
        };



        function done1() {
            console.log("done");
            //document.getElementById("spriteMain").src = canvasMain.toDataURL();
            //Copy the assembled spritesheet to hover canvas.
            ctxh.drawImage(canvasMain, 0, 0);

            //Recolour main sprite sheet.
            var mainPixels = ctxm.getImageData(0, 0, canvasMain.width, canvasMain.height);


            for (var i = 0; i < mainPixels.data.length; i += 4) {
                mainPixels.data[i] = colMain.r;
                mainPixels.data[i + 1] = colMain.g;
                mainPixels.data[i + 2] = colMain.b;
            }

            ctxm.putImageData(mainPixels, 0, 0);

            //Recolour hover sprite sheet.

            var hoverPixels = ctxh.getImageData(0, 0, canvasHover.width, canvasHover.height);



            for (var i = 0; i < hoverPixels.data.length; i += 4) {
                hoverPixels.data[i] = colHover.r;
                hoverPixels.data[i + 1] = colHover.g;
                hoverPixels.data[i + 2] = colHover.b;
            }

            ctxh.putImageData(hoverPixels, 0, 0);

            //Finally display the recoloured spritesheets.
            document.getElementById("spriteMain").src = canvasMain.toDataURL();
            document.getElementById("spriteHover").src = canvasHover.toDataURL();
            prog("");
        }


    }

}

//Other functions

//Function below calculates position of sprite on the sheet using the ID property.
//The sprites are 32x32 pixels arranged on a grid.
//It returns an object containing the x and y positions in that order.
//The position starts from the top-left corner.
function getSpritePosition(hero) {
    var i = parseInt(hero.id) - 1;
    var x = Math.floor(i / rows) * spriteSize;
    var y = (i % rows) * spriteSize;
    return {
        "x": x,
        "y": y
    };
}

//Calculates the dimensions of the sprite sheet.
function getSpritesSize(data) {
    var heroes = Object.values(data);
    var i = heroes.length;
    var x = (Math.floor(i / rows) + 1) * spriteSize;
    var y = rows * spriteSize;
    return {
        "x": x,
        "y": y
    };
}

//Validates the hex code.
// https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation
function validateHex(input) {
    return /^#[0-9A-F]{6}$/i.test(input.toUpperCase());
}

//Converts hex to an RGB object.
// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
function hexToRgb(hex) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

//Report progress.
function prog(text) {
    document.getElementById("spriteProgress").innerHTML = text;
}