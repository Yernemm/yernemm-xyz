{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n\nconst Entities = require('html-entities').XmlEntities;\n\nconst entities = new Entities();\n\nclass GoogleDoc {\n  constructor(url) {\n    this.url = url;\n  }\n\n  async getData() {\n    const res = await fetch(this.url);\n    const data = await res.text();\n    let csssplit1 = data.split('<style type=\"text/css\">')[1];\n    if (csssplit1) csssplit1 = csssplit1.split('</style>')[0];\n    let body = data.split(\"</head>\")[1].split(\"</html>\")[0].replace(\"<body\", \"<div\").replace(\"</body\", \"</div\");\n    let bodyCleanRegex = /(<style(.*?)<\\/style>)|(<script(.*?)<\\/script>)|(https:\\/\\/www.google.com\\/url\\?q\\=)|(&amp;sa=D&amp;ust=[0-9]+)|( class=\"[a-z0-9 ]+\")/gs;\n    body = body.replace(bodyCleanRegex, \"\");\n\n    if (body.includes(\"{{\")) {\n      let bodyArr = [];\n      let bodyt = body.split(\"{{\");\n      bodyArr.push(bodyt[0]);\n\n      for (let i = 1; i < bodyt.length; i++) {\n        let bodyin = bodyt[i].split(\"}}\");\n        bodyArr.push(entities.decode(bodyin[0]));\n        bodyArr.push(bodyin[1]);\n      }\n\n      body = bodyArr.join('');\n    }\n\n    body = body.replace(/{\\\\{/g, '{{');\n    const out = {\n      data: data,\n      body: body,\n      style: csssplit1\n    };\n    return out;\n  }\n\n  async getBody() {\n    // dangerouslySetInnerHTML={{__html: prop.body}}\n    const data = await this.getData();\n    return {\n      __html: data.body\n    };\n  }\n\n}\n\nexport default GoogleDoc;","map":{"version":3,"sources":["C:/Users/barte/OneDrive/Documents/GitHub/yernemm-xyz/scripts/GoogleDoc.js"],"names":["fetch","Entities","require","XmlEntities","entities","GoogleDoc","constructor","url","getData","res","data","text","csssplit1","split","body","replace","bodyCleanRegex","includes","bodyArr","bodyt","push","i","length","bodyin","decode","join","out","style","getBody","__html"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAA1C;;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,EAAjB;;AACA,MAAMI,SAAN,CAAgB;AAEZC,EAAAA,WAAW,CAACC,GAAD,EACX;AACI,SAAKA,GAAL,GAAWA,GAAX;AACH;;AAED,QAAMC,OAAN,GAAe;AACX,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC,KAAKO,GAAN,CAAvB;AACA,UAAMG,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,QAAIC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,yBAAX,EAAsC,CAAtC,CAAhB;AACA,QAAGD,SAAH,EACIA,SAAS,GAAGA,SAAS,CAACC,KAAV,CAAgB,UAAhB,EAA4B,CAA5B,CAAZ;AAEJ,QAAIC,IAAI,GAAGJ,IAAI,CAACG,KAAL,CAAW,SAAX,EAAsB,CAAtB,EAAyBA,KAAzB,CAA+B,SAA/B,EAA0C,CAA1C,EAA6CE,OAA7C,CAAqD,OAArD,EAA8D,MAA9D,EAAsEA,OAAtE,CAA8E,QAA9E,EAAwF,OAAxF,CAAX;AACA,QAAIC,cAAc,GAAG,yIAArB;AAEAF,IAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAaC,cAAb,EAA6B,EAA7B,CAAP;;AAEA,QAAGF,IAAI,CAACG,QAAL,CAAc,IAAd,CAAH,EAAuB;AACnB,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,KAAK,GAAGL,IAAI,CAACD,KAAL,CAAW,IAAX,CAAZ;AAEAK,MAAAA,OAAO,CAACE,IAAR,CAAaD,KAAK,CAAC,CAAD,CAAlB;;AACA,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,KAAK,CAACG,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,YAAIE,MAAM,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASR,KAAT,CAAe,IAAf,CAAb;AACAK,QAAAA,OAAO,CAACE,IAAR,CAAahB,QAAQ,CAACoB,MAAT,CAAgBD,MAAM,CAAC,CAAD,CAAtB,CAAb;AACAL,QAAAA,OAAO,CAACE,IAAR,CAAaG,MAAM,CAAC,CAAD,CAAnB;AACH;;AAEDT,MAAAA,IAAI,GAAGI,OAAO,CAACO,IAAR,CAAa,EAAb,CAAP;AAEH;;AAEDX,IAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsB,IAAtB,CAAP;AAEA,UAAMW,GAAG,GAAG;AACRhB,MAAAA,IAAI,EAAEA,IADE;AAERI,MAAAA,IAAI,EAAEA,IAFE;AAGRa,MAAAA,KAAK,EAAEf;AAHC,KAAZ;AAMA,WAAOc,GAAP;AACH;;AAED,QAAME,OAAN,GAAe;AACX;AACA,UAAMlB,IAAI,GAAG,MAAM,KAAKF,OAAL,EAAnB;AACA,WAAO;AAACqB,MAAAA,MAAM,EAAEnB,IAAI,CAACI;AAAd,KAAP;AACH;;AAjDW;;AAqDhB,eAAeT,SAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nconst Entities = require('html-entities').XmlEntities;\r\n \r\nconst entities = new Entities();\r\nclass GoogleDoc {\r\n\r\n    constructor(url)\r\n    {\r\n        this.url = url;\r\n    }\r\n\r\n    async getData(){\r\n        const res = await fetch(this.url);\r\n        const data = await res.text();\r\n        let csssplit1 = data.split('<style type=\"text/css\">')[1];\r\n        if(csssplit1)\r\n            csssplit1 = csssplit1.split('</style>')[0]\r\n\r\n        let body = data.split(\"</head>\")[1].split(\"</html>\")[0].replace(\"<body\", \"<div\").replace(\"</body\", \"</div\");\r\n        let bodyCleanRegex = /(<style(.*?)<\\/style>)|(<script(.*?)<\\/script>)|(https:\\/\\/www.google.com\\/url\\?q\\=)|(&amp;sa=D&amp;ust=[0-9]+)|( class=\"[a-z0-9 ]+\")/gs\r\n        \r\n        body = body.replace(bodyCleanRegex, \"\");\r\n\r\n        if(body.includes(\"{{\")){\r\n            let bodyArr = []\r\n            let bodyt = body.split(\"{{\");\r\n\r\n            bodyArr.push(bodyt[0]);\r\n            for(let i=1;i<bodyt.length;i++){\r\n                let bodyin = bodyt[i].split(\"}}\");\r\n                bodyArr.push(entities.decode(bodyin[0]))\r\n                bodyArr.push(bodyin[1])\r\n            }\r\n\r\n            body = bodyArr.join('');\r\n\r\n        }\r\n        \r\n        body = body.replace(/{\\\\{/g, '{{')\r\n\r\n        const out = {\r\n            data: data, \r\n            body: body,\r\n            style: csssplit1\r\n        };\r\n    \r\n        return out;\r\n    }\r\n\r\n    async getBody(){\r\n        // dangerouslySetInnerHTML={{__html: prop.body}}\r\n        const data = await this.getData();\r\n        return {__html: data.body};\r\n    }\r\n\r\n}\r\n\r\nexport default GoogleDoc;"]},"metadata":{},"sourceType":"module"}