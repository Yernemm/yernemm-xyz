{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport fetch from 'isomorphic-unfetch';\n\nvar Entities = require('html-entities').XmlEntities;\n\nvar entities = new Entities();\n\nvar GoogleDoc = /*#__PURE__*/function () {\n  function GoogleDoc(url) {\n    _classCallCheck(this, GoogleDoc);\n\n    this.url = url;\n  }\n\n  _createClass(GoogleDoc, [{\n    key: \"getData\",\n    value: function getData() {\n      var res, data, csssplit1, body, bodyCleanRegex, bodyArr, bodyt, i, bodyin, out;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(res.text());\n\n            case 5:\n              data = _context.sent;\n              csssplit1 = data.split('<style type=\"text/css\">')[1];\n              if (csssplit1) csssplit1 = csssplit1.split('</style>')[0];\n              body = data.split(\"</head>\")[1].split(\"</html>\")[0].replace(\"<body\", \"<div\").replace(\"</body\", \"</div\");\n              bodyCleanRegex = /(<style([\\s\\S]*?)<\\/style>)|(<script([\\s\\S]*?)<\\/script>)|(https:\\/\\/www[\\s\\S]google[\\s\\S]com\\/url\\?q=)|(&amp;sa=D&amp;ust=[0-9]+)|( class=\"[ 0-9a-z]+\")/g;\n              body = body.replace(bodyCleanRegex, \"\");\n\n              if (body.includes(\"{{\")) {\n                bodyArr = [];\n                bodyt = body.split(\"{{\");\n                bodyArr.push(bodyt[0]);\n\n                for (i = 1; i < bodyt.length; i++) {\n                  bodyin = bodyt[i].split(\"}}\");\n                  bodyArr.push(entities.decode(bodyin[0]));\n                  bodyArr.push(bodyin[1]);\n                }\n\n                body = bodyArr.join('');\n              }\n\n              body = body.replace(/{\\\\{/g, '{{');\n              out = {\n                data: data,\n                body: body,\n                style: csssplit1\n              };\n              return _context.abrupt(\"return\", out);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody() {\n      var data;\n      return _regeneratorRuntime.async(function getBody$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.getData());\n\n            case 2:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                __html: data.body\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return GoogleDoc;\n}();\n\nexport default GoogleDoc;","map":{"version":3,"sources":["C:/Users/Bakk/Documents/GitHub/yernemm-xyz/scripts/GoogleDoc.js"],"names":["fetch","Entities","require","XmlEntities","entities","GoogleDoc","url","res","text","data","csssplit1","split","body","replace","bodyCleanRegex","includes","bodyArr","bodyt","push","i","length","bodyin","decode","join","out","style","getData","__html"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAA1C;;AAEA,IAAMC,QAAQ,GAAG,IAAIH,QAAJ,EAAjB;;IACMI,S;AAEF,qBAAYC,GAAZ,EACA;AAAA;;AACI,SAAKA,GAAL,GAAWA,GAAX;AACH;;;;;;;;;;;+CAGqBN,KAAK,CAAC,KAAKM,GAAN,C;;;AAAjBC,cAAAA,G;;+CACaA,GAAG,CAACC,IAAJ,E;;;AAAbC,cAAAA,I;AACFC,cAAAA,S,GAAYD,IAAI,CAACE,KAAL,CAAW,yBAAX,EAAsC,CAAtC,C;AAChB,kBAAGD,SAAH,EACIA,SAAS,GAAGA,SAAS,CAACC,KAAV,CAAgB,UAAhB,EAA4B,CAA5B,CAAZ;AAEAC,cAAAA,I,GAAOH,IAAI,CAACE,KAAL,CAAW,SAAX,EAAsB,CAAtB,EAAyBA,KAAzB,CAA+B,SAA/B,EAA0C,CAA1C,EAA6CE,OAA7C,CAAqD,OAArD,EAA8D,MAA9D,EAAsEA,OAAtE,CAA8E,QAA9E,EAAwF,OAAxF,C;AACPC,cAAAA,c,GAAiB,2J;AAErBF,cAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAaC,cAAb,EAA6B,EAA7B,CAAP;;AAEA,kBAAGF,IAAI,CAACG,QAAL,CAAc,IAAd,CAAH,EAAuB;AACfC,gBAAAA,OADe,GACL,EADK;AAEfC,gBAAAA,KAFe,GAEPL,IAAI,CAACD,KAAL,CAAW,IAAX,CAFO;AAInBK,gBAAAA,OAAO,CAACE,IAAR,CAAaD,KAAK,CAAC,CAAD,CAAlB;;AACA,qBAAQE,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACF,KAAK,CAACG,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AACvBE,kBAAAA,MADuB,GACdJ,KAAK,CAACE,CAAD,CAAL,CAASR,KAAT,CAAe,IAAf,CADc;AAE3BK,kBAAAA,OAAO,CAACE,IAAR,CAAad,QAAQ,CAACkB,MAAT,CAAgBD,MAAM,CAAC,CAAD,CAAtB,CAAb;AACAL,kBAAAA,OAAO,CAACE,IAAR,CAAaG,MAAM,CAAC,CAAD,CAAnB;AACH;;AAEDT,gBAAAA,IAAI,GAAGI,OAAO,CAACO,IAAR,CAAa,EAAb,CAAP;AAEH;;AAEDX,cAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsB,IAAtB,CAAP;AAEMW,cAAAA,G,GAAM;AACRf,gBAAAA,IAAI,EAAEA,IADE;AAERG,gBAAAA,IAAI,EAAEA,IAFE;AAGRa,gBAAAA,KAAK,EAAEf;AAHC,e;+CAMLc,G;;;;;;;;;;;;;;;;;;+CAKY,KAAKE,OAAL,E;;;AAAbjB,cAAAA,I;gDACC;AAACkB,gBAAAA,MAAM,EAAElB,IAAI,CAACG;AAAd,e;;;;;;;;;;;;;;AAKf,eAAeP,SAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nconst Entities = require('html-entities').XmlEntities;\n \nconst entities = new Entities();\nclass GoogleDoc {\n\n    constructor(url)\n    {\n        this.url = url;\n    }\n\n    async getData(){\n        const res = await fetch(this.url);\n        const data = await res.text();\n        let csssplit1 = data.split('<style type=\"text/css\">')[1];\n        if(csssplit1)\n            csssplit1 = csssplit1.split('</style>')[0]\n\n        let body = data.split(\"</head>\")[1].split(\"</html>\")[0].replace(\"<body\", \"<div\").replace(\"</body\", \"</div\");\n        let bodyCleanRegex = /(<style(.*?)<\\/style>)|(<script(.*?)<\\/script>)|(https:\\/\\/www.google.com\\/url\\?q\\=)|(&amp;sa=D&amp;ust=[0-9]+)|( class=\"[a-z0-9 ]+\")/gs\n        \n        body = body.replace(bodyCleanRegex, \"\");\n\n        if(body.includes(\"{{\")){\n            let bodyArr = []\n            let bodyt = body.split(\"{{\");\n\n            bodyArr.push(bodyt[0]);\n            for(let i=1;i<bodyt.length;i++){\n                let bodyin = bodyt[i].split(\"}}\");\n                bodyArr.push(entities.decode(bodyin[0]))\n                bodyArr.push(bodyin[1])\n            }\n\n            body = bodyArr.join('');\n\n        }\n        \n        body = body.replace(/{\\\\{/g, '{{')\n\n        const out = {\n            data: data, \n            body: body,\n            style: csssplit1\n        };\n    \n        return out;\n    }\n\n    async getBody(){\n        // dangerouslySetInnerHTML={{__html: prop.body}}\n        const data = await this.getData();\n        return {__html: data.body};\n    }\n\n}\n\nexport default GoogleDoc;"]},"metadata":{},"sourceType":"module"}