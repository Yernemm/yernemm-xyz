{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n\nconst Entities = require('html-entities').XmlEntities;\n\nconst entities = new Entities();\n\nclass GoogleDoc {\n  constructor(url) {\n    this.url = url;\n  }\n\n  async getData() {\n    const res = await fetch(this.url);\n    const data = await res.text();\n    let csssplit1 = data.split('<style type=\"text/css\">')[1];\n    if (csssplit1) csssplit1 = csssplit1.split('</style>')[0];\n    let body = data.split(\"</head>\")[1].split(\"</html>\")[0].replace(\"<body\", \"<div\").replace(\"</body\", \"</div\");\n    let bodyCleanRegex = /(<style(.*?)<\\/style>)|(<script(.*?)<\\/script>)|(https:\\/\\/www.google.com\\/url\\?q\\=)|(&amp;sa=D&amp;ust=[0-9]+)|( class=\"[a-z0-9 ]+\")/gs;\n    body = body.replace(bodyCleanRegex, \"\");\n\n    if (body.includes(\"{{\")) {\n      let bodyArr = [];\n      let bodyt = body.split(\"{{\");\n      bodyArr.push(bodyt[0]);\n\n      for (let i = 1; i < bodyt.length; i++) {\n        let bodyin = bodyt[i].split(\"}}\");\n        bodyArr.push(entities.decode(bodyin[0]));\n        bodyArr.push(bodyin[1]);\n      }\n\n      body = bodyArr.join('');\n    }\n\n    body = body.replace(/{\\\\{/g, '{{');\n    const out = {\n      data: data,\n      body: body,\n      style: csssplit1\n    };\n    return out;\n  }\n\n  async getBody() {\n    // dangerouslySetInnerHTML={{__html: prop.body}}\n    const data = await this.getData();\n    return {\n      __html: data.body\n    };\n  }\n\n}\n\nexport default GoogleDoc;","map":null,"metadata":{},"sourceType":"module"}