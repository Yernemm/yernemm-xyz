{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barte\\\\OneDrive\\\\Documents\\\\GitHub\\\\yernemm-xyz\\\\pages\\\\posts.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Wrapper from '../components/page-wrapper';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\n\nconst u = require('../scripts/util.js');\n\nconst csvtojson = require(\"csvtojson\");\n\nlet Posts = props => __jsx(Wrapper, {\n  title: \"Posts\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, props.postsData.map(data => __jsx(Link, {\n  href: \"/posts/[id]\",\n  as: `/posts/${data.id}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, __jsx(React.Fragment, null, __jsx(\"a\", {\n  className: \"jsx-3502342116\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, __jsx(\"div\", {\n  key: data.id,\n  className: \"jsx-3502342116\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(\"p\", {\n  className: \"jsx-3502342116\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \" \", data.title), __jsx(\"p\", {\n  style: {\n    fontSize: '60%'\n  },\n  className: \"jsx-3502342116\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, \"Created: \", u.formatDate(u.getDateObj(data.created))), __jsx(\"hr\", {\n  className: \"jsx-3502342116\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}))), \" \", __jsx(_JSXStyle, {\n  id: \"3502342116\",\n  __self: this\n}, \"a.jsx-3502342116:link{color:#ccf;}a.jsx-3502342116:visited{color:#ccf;}a.jsx-3502342116:hover{color:#88f;}a.jsx-3502342116:active{color:#88f;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYmFydGVcXE9uZURyaXZlXFxEb2N1bWVudHNcXEdpdEh1YlxceWVybmVtbS14eXpcXHBhZ2VzXFxwb3N0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQjZCLEFBSWdCLEFBS0EsQUFLQSxBQUtBLFdBZGIsQUFLQSxBQUtBLEFBS0EiLCJmaWxlIjoiQzpcXFVzZXJzXFxiYXJ0ZVxcT25lRHJpdmVcXERvY3VtZW50c1xcR2l0SHViXFx5ZXJuZW1tLXh5elxccGFnZXNcXHBvc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdyYXBwZXIgZnJvbSAnLi4vY29tcG9uZW50cy9wYWdlLXdyYXBwZXInO1xyXG5pbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy11bmZldGNoJztcclxuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJztcclxuY29uc3QgdSA9IHJlcXVpcmUoJy4uL3NjcmlwdHMvdXRpbC5qcycpO1xyXG5jb25zdCBjc3Z0b2pzb24gPSByZXF1aXJlKFwiY3N2dG9qc29uXCIpO1xyXG5sZXQgUG9zdHMgPSBwcm9wcyA9PiAoIFxyXG4gICAgPFdyYXBwZXIgdGl0bGU9XCJQb3N0c1wiPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAge3Byb3BzLnBvc3RzRGF0YS5tYXAoZGF0YT0+KFxyXG4gICAgICAgICAgPExpbmsgaHJlZj1cIi9wb3N0cy9baWRdXCIgYXM9e2AvcG9zdHMvJHtkYXRhLmlkfWB9Pjw+PGE+XHJcbiAgICAgICAgICAgIDxkaXYga2V5PXtkYXRhLmlkfT5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDxwPiB7ZGF0YS50aXRsZX08L3A+XHJcbiAgICAgICAgPHAgc3R5bGU9e3tmb250U2l6ZTogJzYwJSd9fT5DcmVhdGVkOiB7dS5mb3JtYXREYXRlKHUuZ2V0RGF0ZU9iaihkYXRhLmNyZWF0ZWQpKX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2E+IDxzdHlsZSBqc3g+e2BcclxuICAvKiB1bnZpc2l0ZWQgbGluayAqL1xyXG4gIGE6bGluayB7XHJcbiAgICBjb2xvcjogI2NjZjtcclxuICB9XHJcbiAgXHJcbiAgLyogdmlzaXRlZCBsaW5rICovXHJcbiAgYTp2aXNpdGVkIHtcclxuICAgIGNvbG9yOiAjY2NmO1xyXG4gIH1cclxuICBcclxuICAvKiBtb3VzZSBvdmVyIGxpbmsgKi9cclxuICBhOmhvdmVyIHtcclxuICAgIGNvbG9yOiAjODhmO1xyXG4gIH1cclxuICBcclxuICAvKiBzZWxlY3RlZCBsaW5rICovXHJcbiAgYTphY3RpdmUge1xyXG4gICAgY29sb3I6ICM4OGY7XHJcbiAgfVxyXG5gfTwvc3R5bGU+PC8+PC9MaW5rPlxyXG4gICAgICAgICkpfVxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIDwvV3JhcHBlcj5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9zdHNcclxuXHJcblBvc3RzLmdldEluaXRpYWxQcm9wcyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC9lLzJQQUNYLTF2U0FmNWExcHdJai15aktQRmhveVFkSFRTM2hIQk5aVllYUVJUQ29BSFhkNnpZTXk1OGlacjBJVzA1NFdnbEJKazlhZmtuc1RJZVZTOGVGL3B1Yj9vdXRwdXQ9Y3N2Jyk7XHJcbiAgICBjb25zdCBjc3YgPSBhd2FpdCByZXMudGV4dCgpO1xyXG4gICAgbGV0IGpzb24gPSBhd2FpdCBjc3Z0b2pzb24oKS5mcm9tU3RyaW5nKGNzdikudGhlbihqc29uID0+IHtcclxuICAgICAgICByZXR1cm4ganNvbjtcclxuICAgIH0pO1xyXG5cclxuICAgIGZvcihsZXQgaT0wOyBpPGpzb24ubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGxldCBzdGFtcCA9IGpzb25baV0uY3JlYXRlZDtcclxuICAgICAgICBpZihzdGFtcCAqIDEgPT0gc3RhbXApXHJcbiAgICAgICAgc3RhbXAgPSBzdGFtcCAqIDFcclxuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKHN0YW1wKTtcclxuICAgICAgICBqc29uW2ldLmNyZWF0ZWRTdGFtcCA9ICsgZDtcclxuICAgIH1cclxuXHJcbiAgICBqc29uID0ganNvbi5zb3J0KHNvcnRCeURhdGUpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNvcnRCeURhdGUoYSxiKXtcclxuICAgICAgICBpZihhLmNyZWF0ZWRTdGFtcCA+IGIuY3JlYXRlZFN0YW1wKSByZXR1cm4gLTE7XHJcbiAgICAgICAgaWYoYS5jcmVhdGVkU3RhbXAgPCBiLmNyZWF0ZWRTdGFtcCkgcmV0dXJuIDE7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jb25zdCBqc29uID0gYXdhaXQgY3N2dG9qc29uXHJcbiAgICByZXR1cm4ge3Bvc3RzRGF0YToganNvbn1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gY29udmVydChjc3Ype1xyXG4gICAgXHJcbn0iXX0= */\\n/*@ sourceURL=C:\\\\\\\\Users\\\\\\\\barte\\\\\\\\OneDrive\\\\\\\\Documents\\\\\\\\GitHub\\\\\\\\yernemm-xyz\\\\\\\\pages\\\\\\\\posts.js */\"))))));\n\nexport default Posts;\n\nPosts.getInitialProps = async function () {\n  const res = await fetch('https://docs.google.com/spreadsheets/d/e/2PACX-1vSAf5a1pwIj-yjKPFhoyQdHTS3hHBNZVYXQRTCoAHXd6zYMy58iZr0IW054WglBJk9afknsTIeVS8eF/pub?output=csv');\n  const csv = await res.text();\n  let json = await csvtojson().fromString(csv).then(json => {\n    return json;\n  });\n\n  for (let i = 0; i < json.length; i++) {\n    let stamp = json[i].created;\n    if (stamp * 1 == stamp) stamp = stamp * 1;\n    let d = new Date(stamp);\n    json[i].createdStamp = +d;\n  }\n\n  json = json.sort(sortByDate);\n\n  function sortByDate(a, b) {\n    if (a.createdStamp > b.createdStamp) return -1;\n    if (a.createdStamp < b.createdStamp) return 1;\n    return 0;\n  } //const json = await csvtojson\n\n\n  return {\n    postsData: json\n  };\n};\n\nasync function convert(csv) {}","map":{"version":3,"sources":["C:/Users/barte/OneDrive/Documents/GitHub/yernemm-xyz/pages/posts.js"],"names":["Wrapper","fetch","Link","u","require","csvtojson","Posts","props","postsData","map","data","id","title","fontSize","formatDate","getDateObj","created","getInitialProps","res","csv","text","json","fromString","then","i","length","stamp","d","Date","createdStamp","sort","sortByDate","a","b","convert"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,4BAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,MAAMC,CAAC,GAAGC,OAAO,CAAC,oBAAD,CAAjB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAIE,KAAK,GAAGC,KAAK,IACb,MAAC,OAAD;AAAS,EAAA,KAAK,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACCA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAAI,IACvB,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,aAAX;AAAyB,EAAA,EAAE,EAAG,UAASA,IAAI,CAACC,EAAG,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAkD,4BAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAClD;AAAK,EAAA,GAAG,EAAED,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAKD,IAAI,CAACE,KAAV,CAFI,EAGJ;AAAG,EAAA,KAAK,EAAE;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAuCV,CAAC,CAACW,UAAF,CAAaX,CAAC,CAACY,UAAF,CAAaL,IAAI,CAACM,OAAlB,CAAb,CAAvC,CAHI,EAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJR,CADkD,CAAF;AAAA;AAAA;AAAA,o4GAAlD,CADD,CADD,CADJ,CADJ;;AAwCA,eAAeV,KAAf;;AAEAA,KAAK,CAACW,eAAN,GAAwB,kBAAiB;AAErC,QAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAC,gJAAD,CAAvB;AACA,QAAMkB,GAAG,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAlB;AACA,MAAIC,IAAI,GAAG,MAAMhB,SAAS,GAAGiB,UAAZ,CAAuBH,GAAvB,EAA4BI,IAA5B,CAAiCF,IAAI,IAAI;AACtD,WAAOA,IAAP;AACH,GAFgB,CAAjB;;AAIA,OAAI,IAAIG,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,IAAI,CAACI,MAApB,EAA4BD,CAAC,EAA7B,EAAgC;AAC5B,QAAIE,KAAK,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQR,OAApB;AACA,QAAGU,KAAK,GAAG,CAAR,IAAaA,KAAhB,EACAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA,QAAIC,CAAC,GAAG,IAAIC,IAAJ,CAASF,KAAT,CAAR;AACAL,IAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQK,YAAR,GAAuB,CAAEF,CAAzB;AACH;;AAEDN,EAAAA,IAAI,GAAGA,IAAI,CAACS,IAAL,CAAUC,UAAV,CAAP;;AAEA,WAASA,UAAT,CAAoBC,CAApB,EAAsBC,CAAtB,EAAwB;AACpB,QAAGD,CAAC,CAACH,YAAF,GAAiBI,CAAC,CAACJ,YAAtB,EAAoC,OAAO,CAAC,CAAR;AACpC,QAAGG,CAAC,CAACH,YAAF,GAAiBI,CAAC,CAACJ,YAAtB,EAAoC,OAAO,CAAP;AACpC,WAAO,CAAP;AACH,GAtBoC,CAwBrC;;;AACA,SAAO;AAACrB,IAAAA,SAAS,EAAEa;AAAZ,GAAP;AACH,CA1BD;;AA4BA,eAAea,OAAf,CAAuBf,GAAvB,EAA2B,CAE1B","sourcesContent":["import Wrapper from '../components/page-wrapper';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport Link from 'next/link';\r\nconst u = require('../scripts/util.js');\r\nconst csvtojson = require(\"csvtojson\");\r\nlet Posts = props => ( \r\n    <Wrapper title=\"Posts\">\r\n        <div>\r\n        {props.postsData.map(data=>(\r\n          <Link href=\"/posts/[id]\" as={`/posts/${data.id}`}><><a>\r\n            <div key={data.id}>\r\n                \r\n        <p> {data.title}</p>\r\n        <p style={{fontSize: '60%'}}>Created: {u.formatDate(u.getDateObj(data.created))}</p>\r\n                    <hr />\r\n                \r\n               \r\n            </div>\r\n            </a> <style jsx>{`\r\n  /* unvisited link */\r\n  a:link {\r\n    color: #ccf;\r\n  }\r\n  \r\n  /* visited link */\r\n  a:visited {\r\n    color: #ccf;\r\n  }\r\n  \r\n  /* mouse over link */\r\n  a:hover {\r\n    color: #88f;\r\n  }\r\n  \r\n  /* selected link */\r\n  a:active {\r\n    color: #88f;\r\n  }\r\n`}</style></></Link>\r\n        ))}\r\n        </div>\r\n\r\n    </Wrapper>\r\n)\r\n\r\nexport default Posts\r\n\r\nPosts.getInitialProps = async function() {\r\n\r\n    const res = await fetch('https://docs.google.com/spreadsheets/d/e/2PACX-1vSAf5a1pwIj-yjKPFhoyQdHTS3hHBNZVYXQRTCoAHXd6zYMy58iZr0IW054WglBJk9afknsTIeVS8eF/pub?output=csv');\r\n    const csv = await res.text();\r\n    let json = await csvtojson().fromString(csv).then(json => {\r\n        return json;\r\n    });\r\n\r\n    for(let i=0; i<json.length; i++){\r\n        let stamp = json[i].created;\r\n        if(stamp * 1 == stamp)\r\n        stamp = stamp * 1\r\n        let d = new Date(stamp);\r\n        json[i].createdStamp = + d;\r\n    }\r\n\r\n    json = json.sort(sortByDate);\r\n\r\n    function sortByDate(a,b){\r\n        if(a.createdStamp > b.createdStamp) return -1;\r\n        if(a.createdStamp < b.createdStamp) return 1;\r\n        return 0;\r\n    }\r\n\r\n    //const json = await csvtojson\r\n    return {postsData: json}\r\n}\r\n\r\nasync function convert(csv){\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}